good due to the authors propose an approuch to identify ATD wihout static code analysis.The paper provides a way to identify and estimate ATD effort in hours using the modularity of componentsThe authors defined a set of formulas to represent Architectural Debt Index.The paper shows the files in architecture root and calculate the effort spend to fix the architecture roots using interview of developers.nannannannannanWeak. The idea of the study about ATDI approuch hotspot identification in Android application is good, but there is no scientific rigor in the paper.Weak. The paper is more technical and describe a tool called sonargraph and its importance to check the software architecture. However, it is not a scientific study.nanGood, due to evaluate architectural debt with tools in a set of real java systems.nanGood, due to the authors proposed a taxonomy of ATD accumatlionnannannannannanGood, due to show an approuch to identify ATD via architecture smells using code analysis and it is possible to monitore the evolution of version regard to architecture smellsnanWeak, but the tool is useful to check important problems from software architecture such as measure software modularity, detect architecture anti-patern and quantify the maintenance cost.goodIn this paper, we present a novel approach for visualizing the debt and the interest together. Such visualization helps the stakeholders identifying and prioritizing ATD, by under- standing the impact of different ATD items (specifically non- allowed dependencies) on efficiency. The validation interviews with the stakeholders at VCG confirmed that such tool would be valuable for architects and other stakeholders. It is important for calculate the performance communication between the components in a automotive domain, but can be used in a network distributed system such as a microservice system.goodgoodgoodGood. The authros proposed an index to check the criticality of architectural smell using pagerank.nanGood. Due to the applied approuch to identificy the security TD and there is a formula to calculate the Principal of Security TDGood, due to demonstrate how important is the effort waste with TD (36%) and the study showed that Software Architecture and Requirements are the aspects most important because waste more time to fix TD.Good, due to Architectural Technical Debt's findings as an essential kind of TD that happens in the context of embedded systems.Good, because there is ATD debt recognized in survey like: Dependence violations, Complex architecture desgin, different parterns and policies, dependence to external resource and lack of reusabililite in designnannannannanGood due to the metrics grouped by the authrosnanRegular, due to even calculating the TD cost, there is NO ATD specif costnanGood, due to the authors proposed a method to identify, estimate and prioritize a kind of ATD, more specifically scalability debt.nannanWeak, due to the author did not study about ATDnan