The authors propose an approuch to identify ATD using documents and models without to get access to source code of the software.nannanThe paper shows 5 (five) types of architecture issued detected in the case study: Unstable Interface, Implicit Cross-module dependency, Unhealth inheritance Hierarchy, clique and Package cycle.nannannannannanThe practical idea of the study about ATDI approuch hotspot identification in Android application is good.The idea of this technical paper is to show the main features from Sonargraph, which is an important tool to check software architecture validation and important metrics such as cyclomatic complexity, propagation cost, and cyclicity.nanThe study showed tools that analysis software architecture structure and some metrics about this.nanThe study shows factors that cause accumulation of ATD using an approuch that monitoring a "Crisis point of ATD Accumulation". Beside, the study show a taxonomy of the causes for ATD. In addition, the study employed a case study using real data from 5 large Scandinavian Software Companies. The companies adopted Agile Software Developement (ASD) as a Software life-cycle processnannannannannanThe author proposed a approuch to discover parts the software that has arquitectural smells using code analysis and code smells detection throught the versions of the software. Besides there is a replication kit available on github ( https://github.com/tommantonela/icsa- 2018) to reproduce the study.nanThe objective of DV8 is to measure software modularity, detect architecture anti-patterns as technical debts, quantify the maintenance cost of each instance of an anti-pattern, and enable return on investment analyses of architectural debts. Different from other tools, DV8 integrates data from both source code and revision historyThe study selected popular open projects that is available; the proposed metrics are simple to calculate; the proposed correlation is easy to understandThe study was performed in a real case industry applicationIt was collected five tools to check TD index about ATD. It was observed how to calculate de TD index and the unit measure.The authors studied a real case for three years and collect data from two large systems about effort and spend the maintenance. The authors analyzed the SVC repository, the bug tracker related to commits, the files changes, and refactoring propagation cust to maintain the systems.The authors studied an evolution process of identifying and tracking architectural smells in corpus qualitas.The authros proposed an index to check the criticality of architectural smell using pagerank. The study used a set of open source software projects to extract data about criticality of architectural smellsnanThere is a lack of study in Security TD. The approuch based in a security catalog widely used in community.This is the first study surveying the estimated magnitude of the interest paid on the accumulated TD in terms of perceived wasted time and effort. The study has shown that software development practitioners estimate that 36 % of all development time is wasted due to TD and that Complex Architectural Design and Requirement TD generates the most negative impact on daily software development work.The study collected real data from a real industry of software embedded using questionaries and interviews about the effort spent on Technical Debt in the embedded system. Thus, the study identified that test TD, code TD, and Architectural TD were highlighted as main kinds of TD, and qualities attributes as functionality, reliability, and performance were the most important in this context.The authors proposed a maturity model (Strategic Adoption Model (SAMTTD)) to control and manage TD. The following steps cover the model: unaware, no tracking, Ad-hoc, Manual, Measured, Institutionalized and Fully automated. The study observed that the practioners that tracking TD wast about 25% of effort on it.nannannannanThe authors collected important metrics regard to architectural metrics and complex metrics.The authors created a usefull plugin that take a way good information to manager and devolopers about architectural metrics and complex metrics directy from github repositories. The plugin is available on https://www.scitools.com/support/gui-plugins/ as called UnderstandnanThe study have access to a large repository from real cases (160) with varius types of technology. This repository was provided by CAST company.nanDescribe a kind of ATD, more spefically scalability ATD and the authors proposed a lightweight approach to manage scalibity debt. The case study conducted a method to identify, estimate and prioritize scalability debt.nannanThe author proporse a therorical important architect risk appetite classificationnan